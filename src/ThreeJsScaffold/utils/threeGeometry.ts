import * as THREE from "three";

/**
 *
 * @param v1
 * @param v2
 */
////////////////////////////////////////////////////////////////////////////////////
export function angleBetweenVectors3(v1: THREE.Vector3, v2: THREE.Vector3): number {
    ////////////////////////////////////////////////////////////////////////////////

    const dp3: number = dotProduct3(v1, v2);
    const cosTheta = dp3 / vectorLength3(v1) * vectorLength3(v2);
    const tryTheta = Math.acos(cosTheta);

    const theta = !!tryTheta ? tryTheta : 0;
    //
    // console.log("cosTheta: ", cosTheta, "   theta: ", theta);

    return theta;
}

////////////////////////////////////////////////////////////////////////////////////
function vectorLength3(v: THREE.Vector3): number {
    ////////////////////////////////////////////////////////////////////////////////

    return Math.pow(Math.pow(v.x, 2) + Math.pow(v.y, 2) + Math.pow(v.z, 2), 0.5);
}

////////////////////////////////////////////////////////////////////////////////////
function dotProduct3(v1: THREE.Vector3, v2: THREE.Vector3): number {
    ////////////////////////////////////////////////////////////////////////////////
    return Math.abs(v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);
}

////////////////////////////////////////////////////////////////////////////////////
export function distanceBetweenPoints(v1: THREE.Vector3, v2: THREE.Vector3): number {
    ////////////////////////////////////////////////////////////////////////////////
    const connectVector = new THREE.Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
    return vectorLength3(connectVector);
}

/////////////////////////
/////////////////////////
/////////////////////////
